library(nloptr)# 1# objective function & its gradient vectoreval_f <- function(x)  list("objective" = x[1]^2,       "gradient" = c(2*x[1])  )# inequality constraints & their gradient vectorseval_g_ineq <- function(x)  list("constraints" = c(x[1]+1),       "jacobian" = rbind(c(1))  )x_init <- -7optimizer <- list("algorithm" = "NLOPT_LD_LBFGS",                  "xtol_rel"  = 1.0e-30)options <- list("algorithm" = "NLOPT_LD_AUGLAG",                "xtol_rel"  = 1.0e-30,                "maxeval"   = 5000,                "local_opts" = optimizer)# model and solve problemnlp1 <- nloptr(x0 = x_init,               eval_f = eval_f,               eval_g_ineq = eval_g_ineq,               opts = options)nlp1$objectivenlp1$solution# 2# objective function & its gradient vectoreval_f <- function(x)  list("objective" = x[1]^2+x[2]^2+x[3]^2,       "gradient" = c(2*x[1],2*x[2],2*x[3])  )# inequality constraints & their gradient vectorseval_g_ineq <- function(x)  list("constraints" = c(x[1]+x[2]+x[3]-6),       "jacobian" = rbind(c(1,1,1))  )# equality constraints & their gradient vectorseval_g_eq <- function(x)  list("constraints" = c(x[1]+2*x[2]+x[3]-10),       "jacobian" = rbind(c(1,2,1))  )x_init <- c(0,0,0)optimizer <- list("algorithm" = "NLOPT_LD_LBFGS",                  "xtol_rel"  = 1.0e-30)options <- list("algorithm" = "NLOPT_LD_AUGLAG",                "xtol_rel"  = 1.0e-30,                "maxeval"   = 5000,                "local_opts" = optimizer)# model and solve problemnlp2 <- nloptr(x0 = x_init,               eval_f = eval_f,               eval_g_ineq = eval_g_ineq,               eval_g_eq = eval_g_eq,               opts = options)nlp2$objectivenlp2$solution# 3# objective function & its gradient vectoreval_f <- function(x)  list("objective" = x[1]^2+x[2]^2,       "gradient" = c(2*x[1],2*x[2])  )# inequality constraints & their gradient vectorseval_g_ineq <- function(x)  list("constraints" = c(x[1]^2+x[2]^2-5),       "jacobian" = rbind(c(2*x[1],2*x[2]))  )# equality constraints & their gradient vectorseval_g_eq <- function(x)  list("constraints" = c(x[1]+2*x[2]-4),       "jacobian" = rbind(c(1,2))  )lb <- c(0,0)x_init <- c(3,3)optimizer <- list("algorithm" = "NLOPT_LD_LBFGS",                  "xtol_rel"  = 1.0e-30)options <- list("algorithm" = "NLOPT_LD_AUGLAG",                "xtol_rel"  = 1.0e-30,                "maxeval"   = 5000,                "local_opts" = optimizer)# model and solve problemnlp3 <- nloptr(x0 = x_init,               eval_f = eval_f,               eval_g_ineq = eval_g_ineq,               eval_g_eq = eval_g_eq,               lb = lb,               opts = options)nlp3$objectivenlp3$solution# 4# objective function & its gradient vectoreval_f <- function(x)  list("objective" = -log(x[1]+1)-x[2],       "gradient" = c(-1/(1 + x[1]),-1)  )# inequality constraint & its gradient vectoreval_g_ineq <- function(x)  list("constraints" = 2*x[1]+x[2]-3,       "jacobian" = rbind(c(2,1))  )# equality constraint & its gradient vectoreval_g_eq <- function(x)  list("constraints" = x[1]^2+x[2]^2-9,       "jacobian" = rbind(c(2*x[1], 2*x[2]))  )lb <- c(0,1)ub <- c(5,4)x_init <- c(1,1)optimizer <- list("algorithm" = "NLOPT_LD_LBFGS",                  "xtol_rel"  = 1.0e-30)options <- list("algorithm" = "NLOPT_LD_AUGLAG",                "xtol_rel"  = 1.0e-30,                "maxeval"   = 5000,                "local_opts" = optimizer)# model and solve problemnlp4 <- nloptr(x0 = x_init,               eval_f = eval_f,               eval_g_ineq = eval_g_ineq,               eval_g_eq = eval_g_eq,               lb = lb,               ub = ub,               opts = options)nlp4$objectivenlp4$solution# 5# objective function & its gradient vectoreval_f <- function(x)  list("objective" = x[1]^2 + x[2]^2,       "gradient" = c(2*x[1], 2*x[2])  )# equality constraints & their gradient vectorseval_g_ineq <- function(x)  list("constraints" = c(1 - x[1] - x[2],                         1 - x[1]^2 - x[2]^2,                         9 - 9*x[1]^2 - x[2]^2,                         x[2] - x[1]^2,                         x[1] - x[2]^2),       "jacobian" = rbind(c(-1, -1),                          c(-2*x[1], -2*x[2]),                          c(-18*x[1], -2*x[2]),                          c(-2*x[1], 1),                          c(1, -2*x[2]))  )lb <- c(-50, -50)ub <- c(50, 50)x_init <- c(3,3)optimizer <- list("algorithm" = "NLOPT_LD_LBFGS",                  "xtol_rel"  = 1.0e-30)options <- list("algorithm" = "NLOPT_LD_AUGLAG",                "xtol_rel"  = 1.0e-30,                "maxeval"   = 5000,                "local_opts" = optimizer)# model and solve problemnlp5 <- nloptr(x0 = x_init,               eval_f = eval_f,               eval_g_ineq = eval_g_ineq,               lb = lb,               ub = ub,               opts = options)nlp5$objectivenlp5$solution